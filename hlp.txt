To perform CRUD (Create, Read, Update, Delete) operations with SQL Server and Node.js, you need to follow these steps:

Set up the project:

Create a new Node.js project or navigate to an existing one.
Initialize the project with npm init and follow the prompts to set up your package.json file.
Install the required dependencies by running npm install mssql to install the SQL Server driver for Node.js.
Connect to the SQL Server database:

Require the mssql module in your Node.js script.
Create a configuration object with the necessary details to connect to your SQL Server database, such as server, database, user, and password.
Use the configuration object to establish a connection to the database.

const sql = require('mssql');

const config = {
  server: 'your_server',
  database: 'your_database',
  user: 'your_username',
  password: 'your_password',
};

sql.connect(config, (err) => {
  if (err) {
    console.log('Error connecting to SQL Server:', err);
  } else {
    console.log('Connected to SQL Server');
    // Perform CRUD operations here
  }
});

Perform CRUD operations:

Once the connection is established, you can execute SQL queries to perform CRUD operations.

Below are examples of each operation:

Create (INSERT):
const insertQuery = "INSERT INTO TableName (Column1, Column2) VALUES (@Value1, @Value2)";

const request = new sql.Request();
request.input('Value1', sql.VarChar, 'Value 1');
request.input('Value2', sql.VarChar, 'Value 2');

request.query(insertQuery, (err, result) => {
  if (err) {
    console.log('Error inserting data:', err);
  } else {
    console.log('Data inserted successfully');
  }
});

Read (SELECT):
const selectQuery = "SELECT * FROM TableName";

const request = new sql.Request();

request.query(selectQuery, (err, result) => {
  if (err) {
    console.log('Error retrieving data:', err);
  } else {
    console.log('Retrieved data:', result.recordset);
  }
});
Update (UPDATE):
const updateQuery = "UPDATE TableName SET Column1 = @NewValue WHERE ConditionColumn = @Condition";

const request = new sql.Request();
request.input('NewValue', sql.VarChar, 'New Value');
request.input('Condition', sql.Int, 1);

request.query(updateQuery, (err, result) => {
  if (err) {
    console.log('Error updating data:', err);
  } else {
    console.log('Data updated successfully');
  }
});
Delete (DELETE):
const deleteQuery = "DELETE FROM TableName WHERE ConditionColumn = @Condition";

const request = new sql.Request();
request.input('Condition', sql.Int, 1);

request.query(deleteQuery, (err, result) => {
  if (err) {
    console.log('Error deleting data:', err);
  } else {
    console.log('Data deleted successfully');
  }
});
Close the connection:

Once you have finished performing the CRUD operations, it's important to close the connection to the SQL Server database.
sql.close();

Remember to adapt the code snippets to match your specific database schema, table names, and column names.

user:
SQLTest/sqltest

--creating a login

CREATE LOGIN apiUserLogin WITH PASSWORD = 'theApiUser';

--create a user within the specific database to provide access and define permissions

USE CJIS;
CREATE USER apiUser FOR LOGIN apiUserLogin;

-- Grant user membership to a database role
--EXEC sp_addrolemember N'db_datareader', NapiUser;
--EXEC sp_addrolemember N'db_datawriter', N'apiUser';

-- Grant explicit permissions to objects
GRANT SELECT, INSERT, UPDATE, DELETE ON dbo.emp TO apiUser;
///////////////////////////////////////////////////////////////////

npm install @material-ui/core @material-ui/icons react-table

///////////////////////////////////////////////////////////////////

import React, { useMemo } from 'react';
import { useTable, useSortBy, usePagination } from 'react-table';
import { Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, TablePagination } from '@material-ui/core';

const EmployeeTable = ({ data }) => {
  const columns = useMemo(
    () => [
      { Header: 'ID', accessor: 'uId' },
      { Header: 'Name', accessor: 'name' },
      { Header: 'Date of Birth', accessor: 'dob' },
      { Header: 'City', accessor: 'city' },
      { Header: 'Mobile', accessor: 'mobile' },
    ],
    []
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    page,
    nextPage,
    previousPage,
    canNextPage,
    canPreviousPage,
    pageOptions,
    state: { pageIndex, pageSize },
    gotoPage,
    setPageSize,
  } = useTable(
    {
      columns,
      data,
      initialState: { pageIndex: 0, pageSize: 5 }, // Initial page index and size
    },
    useSortBy,
    usePagination
  );

  return (
    <>
      <TableContainer component={Paper}>
        <Table {...getTableProps()}>
          <TableHead>
            {headerGroups.map((headerGroup) => (
              <TableRow {...headerGroup.getHeaderGroupProps()}>
                {headerGroup.headers.map((column) => (
                  <TableCell {...column.getHeaderProps(column.getSortByToggleProps())}>
                    {column.render('Header')}
                    {column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : ''}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableHead>
          <TableBody {...getTableBodyProps()}>
            {page.map((row) => (
              <TableRow {...row.getRowProps()}>
                {row.cells.map((cell) => (
                  <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Pagination */}
      <TablePagination
        rowsPerPageOptions={[5, 10, 20]}
        component="div"
        count={data.length}
        rowsPerPage={pageSize}
        page={pageIndex}
        onPageChange={(event, newPage) => gotoPage(newPage)}
        onRowsPerPageChange={(event) => {
          setPageSize(Number(event.target.value));
        }}
      />
    </>
  );
};

export default EmployeeTable;
////////////////////////////////////////////////////////////////
import React from 'react';
import EmployeeTable from './EmployeeTable';

const data = [
  { uId: 1, name: 'John Doe', dob: '1990-05-15', city: 'New York', mobile: '123-456-7890' },
  { uId: 2, name: 'Jane Smith', dob: '1985-09-22', city: 'Los Angeles', mobile: '987-654-3210' },
  // Add more data here...
];

const App = () => {
  return (
    <div>
      <h1>Employee Table</h1>
      <EmployeeTable data={data} />
    </div>
  );
};

export default App;
//////////////////////////////////////////////////////

why use React-Table when material UI provides the same?
ChatGPT
You are correct that Material-UI provides its own table component (<Table>, <TableRow>, <TableCell>, etc.) that supports basic functionality. Material-UI tables are suitable for simpler use cases where you need a straightforward table with minimal features.

However, if you require more advanced features like sorting, filtering, and pagination, React-Table is a more powerful and flexible library specifically designed to handle complex data tables in React applications. It abstracts away the complexity of managing state and interactions in a table and allows you to focus on defining columns and data.

Here are some reasons why you might want to use React-Table over Material-UI's built-in table:

Rich Features: React-Table provides extensive features out of the box, including sorting, filtering, pagination, column resizing, and more. While Material-UI's table offers basic sorting, React-Table makes it easier to implement additional features without having to write custom code.

Performance Optimization: React-Table is designed to be efficient in handling large datasets. It uses various optimizations like virtualization to render only the visible rows, minimizing the DOM updates and improving performance.

Customization: React-Table is highly customizable, allowing you to create custom cells, headers, and even the entire rendering logic. This flexibility is especially useful when dealing with complex data and UI requirements.

Maintainability: With React-Table, you can manage the table's state and behavior separately from your main component, making the codebase cleaner and more maintainable.

Community and Support: React-Table has a dedicated community and active development, which means regular updates, bug fixes, and new features.

It's essential to consider the specific requirements of your project when choosing between using Material-UI's built-in table or a more specialized library like React-Table. If your use case is relatively simple and requires only basic table functionality, using Material-UI's table component is a reasonable choice. However, if you need more advanced features and better control over your table, React-Table is a robust option worth considering.

//////////////////////////////////////////////////////////